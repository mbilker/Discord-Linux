'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _electron = require('electron');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log('I run before anything else');

var mainProcess = _electron.remote.require('./VoiceEngine');
var runWebpackCb = false;

function noop() {};

function webpackCb(chunkIds, moreModules) {
  if (runWebpackCb) return;
  runWebpackCb = true;

  console.log('parent webpack');

  setImmediate(afterInitialJsonp);
}

function findWebpackModule(exportedToLookFor) {
  var webpackRequire = window.__webpackRequire;
  var mod = webpackRequire.c;
  var results = [];

  for (var i = 0; i < webpackRequire.m.length; i++) {
    if (mod[i] && mod[i].exports && exportedToLookFor.every(function (x) {
      return mod[i].exports[x];
    })) {
      results.push(mod[i]);
    }
  }

  return results;
}

var loadedVoiceEngine = null;
function findWebRTCModule() {
  if (loadedVoiceEngine) {
    return loadedVoiceEngine;
  }

  var voiceLoader = findWebpackModule(['handleSessionDescription']).filter(function (x) {
    return __webpackRequire.m[x.id].toString().match(/webkitGetUserMedia/);
  })[0];
  if (!voiceLoader) {
    throw new Error('Cannot find voice engine loader');
  }
  var text = __webpackRequire.m[voiceLoader.id].toString();
  var reg = /n\(([0-9]+)\)/g;
  var results = [];
  var res = null;

  while (res = reg.exec(text)) {
    results.push(res);
  }

  loadedVoiceEngine = results.filter(function (x) {
    return !__webpackRequire.c[x[1]];
  }).map(function (x) {
    return parseInt(x[1]);
  })[0];

  return loadedVoiceEngine;
}

var lastVoiceEngine = null;
function shimVoiceEngine(voiceEngine) {
  if (voiceEngine === lastVoiceEngine) {
    return;
  }

  lastVoiceEngine = voiceEngine;
  console.log('shimming', voiceEngine);

  var num = findWebRTCModule();
  var obj = __webpackRequire(num);

  var playSound = findWebpackModule(['playSound']).filter(function (x) {
    return Object.keys(x.exports).length === 1;
  })[0].exports.playSound;


  Object.assign(voiceEngine, obj);
  voiceEngine.playSound = function playSound2(name, volume) {
    playSound(name, volume, true);
  };

  obj.onSpeaking(function () {
    var _console;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    (_console = console).log.apply(_console, ['onSpeaking'].concat(args));
    mainProcess.handleOnSpeakingEvent.apply(mainProcess, args);
  });
  obj.onVoiceActivity(function () {
    mainProcess.handleOnVoiceEvent.apply(mainProcess, arguments);
  });
  //obj.onDevicesChanged((...args) => {
  //  mainProcess.handleOnDevicesChangedEvent(...args);
  //});
  obj.getInputDevices(function (devices) {
    var device = devices[0].id;
    obj.setInputDevice(device);

    obj.enable(function (err) {
      console.log('VoiceEngine.enable', err);
    });
  });
}

function injectedModule(module, exports, webpackRequire) {
  console.log('injected module');

  var modules = webpackRequire.c;
  var webpackVoiceEngines = [];

  window.__webpackRequire = webpackRequire;
  window.__voiceEngines = webpackVoiceEngines;

  for (var i = 0; i < webpackRequire.m.length; i++) {
    if (modules[i] && modules[i].exports && modules[i].exports.handleSessionDescription) {
      webpackVoiceEngines.push(modules[i]);
      break;
    }
  }

  if (webpackVoiceEngines.length) {
    for (var i = 0; i < webpackVoiceEngines.length; i++) {
      shimVoiceEngine(webpackVoiceEngines[i].exports);
    }
  }

  module.exports = { mbilker: true };
}

function afterInitialJsonp() {
  console.log(window['webpackJsonp']);

  window['webpackJsonp']([0], [injectedModule]);
}

//window['webpackJsonp'] = console.log.bind(console, 'parent webpack:');
window['webpackJsonp'] = webpackCb;
window['findWebpackModule'] = findWebpackModule;
window['findWebRTCModule'] = findWebRTCModule;
window['getVoiceEngine'] = function () {
  return lastVoiceEngine;
};
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcmVsb2FkLmpzIn0=