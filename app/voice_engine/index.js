'use strict';

var _electron = require('electron');

var _superagentPatch = require('./superagentPatch');

var _superagentPatch2 = _interopRequireDefault(_superagentPatch);

var _webrtc = require('./lib/voice_engine/webrtc');

var _webrtc2 = _interopRequireDefault(_webrtc);

var _Constants = require('./Constants');

var _Constants2 = require('./lib/voice_engine/native/Constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

localStorage.debug = '*';

//const _VoiceEngine = require('./lib/voice_engine/webrtc');
//const VoiceEngine = _VoiceEngine && _VoiceEngine['__esModule'] ? _VoiceEngine.default ? _VoiceEngine;


navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
window.AudioContext = window.AudioContext || window.webkitAudioContext || navigator.mozAudioContext;
window.RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
window.RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;

var _deInterop = function _deInterop(cb) {
  if (cb && cb['__INTEROP_CALLBACK'] && cb.name) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (cb.name !== 'set-on-speaking-callback-reply' && cb.name !== 'set-on-voice-callback-reply' && cb.name !== 'set-device-change-callback-reply') {
        var _console;

        (_console = console).log.apply(_console, [cb.name + ':'].concat(args));
      }
      _electron.ipcRenderer.send.apply(_electron.ipcRenderer, [cb.name].concat(args));
    };
  }
};

_electron.ipcRenderer.on('get-token-and-fingerprint', function (ev, _ref) {
  var rawToken = _ref.token;
  var fingerprint = _ref.fingerprint;

  var token = (rawToken || '').replace(/"/g, '');

  console.log('get-token-and-fingerprint: token=' + token + ' fingerprint=' + fingerprint);
  window.token = token;
  window.fingerprint = fingerprint;

  localStorage.setItem('token', token);
  localStorage.setItem('fingerprint', fingerprint);
});
_electron.ipcRenderer.on('create-transport', function (ev, ssrc, userId, address, port, cb) {
  console.log('create-transport:', ssrc, userId, address, port, cb);
  _webrtc2.default.enable(function (err) {
    console.log('VoiceEngine.enable:', err);
  });
  _webrtc2.default.connect(ssrc, userId, address, port, _deInterop(cb));
});
_electron.ipcRenderer.on('set-on-speaking-callback', function (ev, cb) {
  console.log('set-on-speaking-callback:', cb);
  _webrtc2.default.onSpeaking(_deInterop(cb));
});
_electron.ipcRenderer.on('set-on-voice-callback', function (ev, cb) {
  console.log('set-on-voice-callback:', cb);
  _webrtc2.default.onVoiceActivity(_deInterop(cb));
});
_electron.ipcRenderer.on('on-connection-state', function (ev, cb) {
  console.log('on-connection-state:', cb);
  _webrtc2.default.onConnectionState(_deInterop(cb));
});
_electron.ipcRenderer.on('set-device-change-callback', function (ev, cb) {
  console.log('set-device-change-callback:', cb);
  _webrtc2.default.onDevicesChanged(_deInterop(cb));
});
_electron.ipcRenderer.on('get-input-devices', function (ev, cb) {
  console.log('get-input-devices:', cb);
  _webrtc2.default.getInputDevices(_deInterop(cb));
});
['setEchoCancellation', 'setNoiseSuppression', 'setAutomaticGainControl'].forEach(function (method) {
  _electron.ipcRenderer.on(method, function (ev, enabled) {
    console.log(method + ':', enabled);
    _webrtc2.default[method](enabled);
  });
});
_electron.ipcRenderer.on('set-input-device', function (ev, inputDeviceIndex) {
  console.log('set-input-device:', inputDeviceIndex);
  _webrtc2.default.getInputDevices(function (devices) {
    var device = devices[inputDeviceIndex].id;
    _webrtc2.default.setInputDevice(device);
  });
});
_electron.ipcRenderer.on('set-input-mode', function (ev, mode, options) {
  console.log('set-input-mode:', mode, options);
  if (_Constants2.NATIVE_TO_REGULAR[mode] === _Constants.InputModes.PUSH_TO_TALK) {
    options = Object.assign({}, options, { delay: options.pttDelay });
  }
  _webrtc2.default.setInputMode(_Constants2.NATIVE_TO_REGULAR[mode], options);
});
_electron.ipcRenderer.on('get-output-devices', function (ev, cb) {
  console.log('get-output-devices:', cb);
  _webrtc2.default.getOutputDevices(_deInterop(cb));
});
_electron.ipcRenderer.on('set-output-volume', function (ev, volume) {
  console.log('set-output-volume:', volume);
  _webrtc2.default.setOutputVolume(volume);
});
_electron.ipcRenderer.on('set-self-mute', function (ev, mute) {
  console.log('set-self-mute:', mute);
  _webrtc2.default.setSelfMute(mute);
});
_electron.ipcRenderer.on('set-self-deafen', function (ev, deaf) {
  console.log('set-self-deafen:', deaf);
  _webrtc2.default.setSelfDeaf(deaf);
});
_electron.ipcRenderer.on('set-local-mute', function (ev, userId, mute) {
  console.log('set-local-mute:', userId, mute);
  _webrtc2.default.setLocalMute(userId, mute);
});
_electron.ipcRenderer.on('set-local-volume', function (ev, userId, volume) {
  console.log('set-local-volume:', userId, volume);
  _webrtc2.default.setLocalVolume(userId, volume);
});
_electron.ipcRenderer.on('destroy-transport', function (ev) {
  console.log('destroy-transport');
  _webrtc2.default.disconnect();
});
_electron.ipcRenderer.on('handle-speaking', function (ev, userId, speaking) {
  //console.log('handle-speaking:', userId, speaking);
  _webrtc2.default.handleSpeaking(userId, speaking);
});
_electron.ipcRenderer.on('handle-session-description', function (ev, obj) {
  console.log('handle-session-description:', obj);
  _webrtc2.default.handleSessionDescription(obj);
});
_electron.ipcRenderer.on('merge-users', function (ev, users) {
  console.log('merge-users:', users);
  users.forEach(function (user) {
    _webrtc2.default.createUser(user.id, user.ssrc);
  });
});
_electron.ipcRenderer.on('destroy-user', function (ev, userId) {
  console.log('destroy-user:', userId);
  _webrtc2.default.destroyUser(userId);
});
//# sourceMappingURL=data:application/json;base64,